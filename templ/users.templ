package templ

import (
	"strconv"
	"github.com/alpemreelmas/sysara/internal/models"
)

type UserListData struct {
	AuthData
	Users []models.User
	Error string
}

type UserCreateData struct {
	AuthData
	Error string
	Name  string
	Email string
}

type UserEditData struct {
	AuthData
	User  models.User
	Error string
}

templ UserList(data UserListData) {
	@Auth(data.AuthData) {
		<div class="space-y-6">
			<!-- Header -->
			<div class="sm:flex sm:items-center">
				<div class="sm:flex-auto">
					<h1 class="text-xl font-semibold text-gray-900">Users</h1>
					<p class="mt-2 text-sm text-gray-700">Manage system users and their access.</p>
				</div>
				<div class="mt-4 sm:mt-0 sm:ml-16 sm:flex-none">
					<a href="/users/create" class="inline-flex items-center justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto">
						<i class="fas fa-plus mr-2"></i>
						Add User
					</a>
				</div>
			</div>

			if data.Error != "" {
				<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
					<span class="block sm:inline">{ data.Error }</span>
				</div>
			}

			<!-- Users Table -->
			<div class="bg-white shadow overflow-hidden sm:rounded-md">
				<ul class="divide-y divide-gray-200">
					if len(data.Users) > 0 {
						for _, user := range data.Users {
							<li>
								<div class="px-4 py-4 flex items-center justify-between">
									<div class="flex items-center">
										<div class="flex-shrink-0 h-10 w-10">
											<div class="h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center">
												<i class="fas fa-user text-gray-600"></i>
											</div>
										</div>
										<div class="ml-4">
											<div class="flex items-center">
												<p class="text-sm font-medium text-gray-900">{ user.Name }</p>
												if user.ID == data.CurrentUser.ID {
													<span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
														You
													</span>
												}
											</div>
											<p class="text-sm text-gray-500">{ user.Email }</p>
											<p class="text-xs text-gray-400">Member since { user.CreatedAt.Format("Jan 2, 2006") }</p>
										</div>
									</div>
									<div class="flex items-center space-x-2">
										<a href={ "/users/" + strconv.Itoa(int(user.ID)) + "/edit" } class="inline-flex items-center px-3 py-1.5 border border-gray-300 shadow-sm text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
											<i class="fas fa-edit mr-1"></i>
											Edit
										</a>
										if user.ID != data.CurrentUser.ID {
											<form method="POST" action={ "/users/" + strconv.Itoa(int(user.ID)) + "/delete" } class="inline" onsubmit="return confirm('Are you sure you want to delete this user?')">
												<button type="submit" class="inline-flex items-center px-3 py-1.5 border border-red-300 shadow-sm text-xs font-medium rounded text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
													<i class="fas fa-trash mr-1"></i>
													Delete
												</button>
											</form>
										}
									</div>
								</div>
							</li>
						}
					} else {
						<li class="px-4 py-8 text-center">
							<div class="text-sm text-gray-500">
								<i class="fas fa-users text-4xl text-gray-400 mb-4"></i>
								<p>No users found.</p>
								<a href="/users/create" class="text-indigo-600 hover:text-indigo-500">Create the first user</a>
							</div>
						</li>
					}
				</ul>
			</div>
		</div>
	}
}

templ UserEdit(data UserEditData) {
	@Auth(data.AuthData) {
		<div class="space-y-6">
			<!-- Header -->
			<div>
				<nav class="flex" aria-label="Breadcrumb">
					<ol class="flex items-center space-x-4">
						<li>
							<a href="/users" class="text-gray-400 hover:text-gray-500">
								<i class="fas fa-users"></i>
								<span class="sr-only">Users</span>
							</a>
						</li>
						<li>
							<div class="flex items-center">
								<i class="fas fa-chevron-right text-gray-400 mr-4"></i>
								<span class="text-sm font-medium text-gray-900">Edit { data.User.Name }</span>
							</div>
						</li>
					</ol>
				</nav>
				<div class="mt-4">
					<h1 class="text-xl font-semibold text-gray-900">Edit User</h1>
					<p class="mt-1 text-sm text-gray-600">Update user information and settings.</p>
				</div>
			</div>

			<!-- Form -->
			<div class="bg-white shadow sm:rounded-lg">
				<div class="px-4 py-5 sm:p-6">
					if data.Error != "" {
						<div class="mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
							<span class="block sm:inline">{ data.Error }</span>
						</div>
					}

					<form method="POST" action={ "/users/" + strconv.Itoa(int(data.User.ID)) + "/edit" } class="space-y-6">
						<div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
							<div class="sm:col-span-3">
								<label for="name" class="block text-sm font-medium text-gray-700">
									Full Name
								</label>
								<div class="mt-1">
									<input type="text" name="name" id="name" value={ data.User.Name } required class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md"/>
								</div>
							</div>

							<div class="sm:col-span-3">
								<label for="email" class="block text-sm font-medium text-gray-700">
									Email Address
								</label>
								<div class="mt-1">
									<input type="email" name="email" id="email" value={ data.User.Email } required class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md"/>
								</div>
							</div>

							<div class="sm:col-span-6">
								<label for="password" class="block text-sm font-medium text-gray-700">
									New Password
								</label>
								<div class="mt-1">
									<input type="password" name="password" id="password" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" placeholder="Leave blank to keep current password"/>
								</div>
								<p class="mt-1 text-sm text-gray-500">Leave blank to keep the current password. Must be at least 6 characters if changing.</p>
							</div>
						</div>

						<div class="flex justify-end space-x-3">
							<a href="/users" class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
								Cancel
							</a>
							<button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
								<i class="fas fa-save mr-2"></i>
								Update User
							</button>
						</div>
					</form>
				</div>
			</div>

			<!-- User Information -->
			<div class="bg-white shadow sm:rounded-lg">
				<div class="px-4 py-5 sm:p-6">
					<h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">User Information</h3>
					<dl class="grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2">
						<div>
							<dt class="text-sm font-medium text-gray-500">User ID</dt>
							<dd class="mt-1 text-sm text-gray-900">{ strconv.Itoa(int(data.User.ID)) }</dd>
						</div>
						<div>
							<dt class="text-sm font-medium text-gray-500">Created</dt>
							<dd class="mt-1 text-sm text-gray-900">{ data.User.CreatedAt.Format("January 2, 2006 at 3:04 PM") }</dd>
						</div>
						<div>
							<dt class="text-sm font-medium text-gray-500">Last Updated</dt>
							<dd class="mt-1 text-sm text-gray-900">{ data.User.UpdatedAt.Format("January 2, 2006 at 3:04 PM") }</dd>
						</div>
					</dl>
				</div>
			</div>
		</div>
	}
}

templ UserCreate(data UserCreateData) {
	@Auth(data.AuthData) {
		<div class="space-y-6">
			<!-- Header -->
			<div>
				<nav class="flex" aria-label="Breadcrumb">
					<ol class="flex items-center space-x-4">
						<li>
							<a href="/users" class="text-gray-400 hover:text-gray-500">
								<i class="fas fa-users"></i>
								<span class="sr-only">Users</span>
							</a>
						</li>
						<li>
							<div class="flex items-center">
								<i class="fas fa-chevron-right text-gray-400 mr-4"></i>
								<span class="text-sm font-medium text-gray-900">Create User</span>
							</div>
						</li>
					</ol>
				</nav>
				<div class="mt-4">
					<h1 class="text-xl font-semibold text-gray-900">Create New User</h1>
					<p class="mt-1 text-sm text-gray-600">Add a new user to the system.</p>
				</div>
			</div>

			<!-- Form -->
			<div class="bg-white shadow sm:rounded-lg">
				<div class="px-4 py-5 sm:p-6">
					if data.Error != "" {
						<div class="mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
							<span class="block sm:inline">{ data.Error }</span>
						</div>
					}

					<form method="POST" action="/users/create" class="space-y-6">
						<div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
							<div class="sm:col-span-3">
								<label for="name" class="block text-sm font-medium text-gray-700">
									Full Name
								</label>
								<div class="mt-1">
									<input type="text" name="name" id="name" value={ data.Name } required class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md"/>
								</div>
							</div>

							<div class="sm:col-span-3">
								<label for="email" class="block text-sm font-medium text-gray-700">
									Email Address
								</label>
								<div class="mt-1">
									<input type="email" name="email" id="email" value={ data.Email } required class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md"/>
								</div>
							</div>

							<div class="sm:col-span-6">
								<label for="password" class="block text-sm font-medium text-gray-700">
									Password
								</label>
								<div class="mt-1">
									<input type="password" name="password" id="password" required class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md"/>
								</div>
								<p class="mt-1 text-sm text-gray-500">Must be at least 6 characters long.</p>
							</div>
						</div>

						<div class="flex justify-end space-x-3">
							<a href="/users" class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
								Cancel
							</a>
							<button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
								<i class="fas fa-plus mr-2"></i>
								Create User
							</button>
						</div>
					</form>
				</div>
			</div>
		</div>
	}
}