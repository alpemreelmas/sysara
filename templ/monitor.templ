package templ

import (
	"fmt"
	"strconv"
	"github.com/alpemreelmas/sysara/internal/utils"
)

// SystemStats represents system statistics
type SystemStats struct {
	CPU     CPUStats     `json:"cpu"`
	Memory  MemoryStats  `json:"memory"`
	Disk    DiskStats    `json:"disk"`
	Network NetworkStats `json:"network"`
	Host    HostStats    `json:"host"`
}

type CPUStats struct {
	Usage     float64 `json:"usage"`
	Cores     int     `json:"cores"`
	ModelName string  `json:"model_name"`
}

type MemoryStats struct {
	Total       uint64  `json:"total"`
	Available   uint64  `json:"available"`
	Used        uint64  `json:"used"`
	UsedPercent float64 `json:"used_percent"`
}

type DiskStats struct {
	Total       uint64  `json:"total"`
	Free        uint64  `json:"free"`
	Used        uint64  `json:"used"`
	UsedPercent float64 `json:"used_percent"`
}

type NetworkStats struct {
	BytesSent   uint64 `json:"bytes_sent"`
	BytesRecv   uint64 `json:"bytes_recv"`
	PacketsSent uint64 `json:"packets_sent"`
	PacketsRecv uint64 `json:"packets_recv"`
}

type HostStats struct {
	Hostname        string `json:"hostname"`
	Uptime          uint64 `json:"uptime"`
	OS              string `json:"os"`
	Platform        string `json:"platform"`
	PlatformVersion string `json:"platform_version"`
	KernelVersion   string `json:"kernel_version"`
}

type ProcessInfo struct {
	PID        int32   `json:"pid"`
	Name       string  `json:"name"`
	CPUPercent float64 `json:"cpu_percent"`
	Memory     uint64  `json:"memory"`
	Status     string  `json:"status"`
}

type MonitorData struct {
	AuthData
}

type SystemStatsData struct {
	Stats SystemStats
}

type ProcessListData struct {
	Processes []ProcessInfo
}

templ Monitor(data MonitorData) {
	@Auth(data.AuthData) {
		<div class="space-y-6">
			<!-- Header -->
			<div>
				<h1 class="text-xl font-semibold text-gray-900">System Monitor</h1>
				<p class="mt-1 text-sm text-gray-600">Real-time system performance metrics and monitoring.</p>
			</div>

			<!-- System Stats -->
			<div id="system-stats" hx-get="/monitor/api/stats" hx-trigger="load, every 5s" hx-indicator="#loading-indicator">
				<!-- Stats will be loaded here via HTMX -->
				<div class="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4">
					<!-- Loading placeholders -->
					for i := 0; i < 4; i++ {
						<div class="bg-white overflow-hidden shadow rounded-lg animate-pulse">
							<div class="p-5">
								<div class="flex items-center">
									<div class="flex-shrink-0">
										<div class="w-8 h-8 bg-gray-200 rounded-full"></div>
									</div>
									<div class="ml-5 w-0 flex-1">
										<div class="h-4 bg-gray-200 rounded w-16 mb-2"></div>
										<div class="h-6 bg-gray-200 rounded w-12"></div>
									</div>
								</div>
							</div>
						</div>
					}
				</div>
			</div>

			<!-- Process List -->
			<div class="bg-white shadow sm:rounded-lg">
				<div class="px-4 py-5 sm:p-6">
					<h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Running Processes</h3>
					<div id="process-list" hx-get="/monitor/api/processes" hx-trigger="load, every 10s" hx-indicator="#loading-indicator">
						<!-- Process list will be loaded here via HTMX -->
						<div class="animate-pulse">
							<div class="space-y-3">
								<div class="h-4 bg-gray-200 rounded w-full"></div>
								<div class="h-4 bg-gray-200 rounded w-5/6"></div>
								<div class="h-4 bg-gray-200 rounded w-4/6"></div>
								<div class="h-4 bg-gray-200 rounded w-3/6"></div>
							</div>
						</div>
					</div>
				</div>
			</div>

			<!-- System Information -->
			<div class="grid grid-cols-1 gap-6 lg:grid-cols-2">
				<!-- Host Information (will be populated by HTMX) -->
				<div class="bg-white shadow sm:rounded-lg">
					<div class="px-4 py-5 sm:p-6">
						<h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Host Information</h3>
						<div id="host-info">
							<!-- Will be populated via HTMX -->
						</div>
					</div>
				</div>

				<!-- Quick Actions -->
				<div class="bg-white shadow sm:rounded-lg">
					<div class="px-4 py-5 sm:p-6">
						<h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Quick Actions</h3>
						<div class="space-y-3">
							<button onclick="refreshStats()" class="w-full text-left flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
								<i class="fas fa-sync-alt mr-3 text-gray-400"></i>
								Refresh All Data
							</button>
							<a href="/dashboard" class="w-full text-left flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
								<i class="fas fa-tachometer-alt mr-3 text-gray-400"></i>
								Return to Dashboard
							</a>
						</div>
					</div>
				</div>
			</div>
		</div>

		<script>
			function refreshStats() {
				htmx.trigger('#system-stats', 'refresh');
				htmx.trigger('#process-list', 'refresh');
				
				// Show a brief notification
				const notification = document.createElement('div');
				notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
				notification.textContent = 'Data refreshed';
				document.body.appendChild(notification);
				
				setTimeout(() => {
					notification.remove();
				}, 2000);
			}

			// Update timestamp every second
			setInterval(function() {
				const timestamps = document.querySelectorAll('.timestamp');
				timestamps.forEach(function(element) {
					const now = new Date();
					element.textContent = 'Last updated: ' + now.toLocaleTimeString();
				});
			}, 1000);
		</script>
	}
}

templ SystemStatsPartial(data SystemStatsData) {
	<!-- System Statistics Cards -->
	<div class="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4">
		<!-- CPU Usage -->
		<div class="bg-white overflow-hidden shadow rounded-lg">
			<div class="p-5">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
							<i class="fas fa-microchip text-blue-600"></i>
						</div>
					</div>
					<div class="ml-5 w-0 flex-1">
						<dl>
							<dt class="text-sm font-medium text-gray-500 truncate">CPU Usage</dt>
							<dd class="text-lg font-medium text-gray-900">{ fmt.Sprintf("%.1f", data.Stats.CPU.Usage) }%</dd>
						</dl>
					</div>
				</div>
				<div class="mt-3">
					<div class="flex items-center text-sm">
						<div class="flex-1 bg-gray-200 rounded-full h-2">
							<div class="bg-blue-500 h-2 rounded-full" style={ "width: " + fmt.Sprintf("%.1f", data.Stats.CPU.Usage) + "%" }></div>
						</div>
						<span class="ml-2 text-xs text-gray-500">{ strconv.Itoa(data.Stats.CPU.Cores) } cores</span>
					</div>
				</div>
			</div>
		</div>

		<!-- Memory Usage -->
		<div class="bg-white overflow-hidden shadow rounded-lg">
			<div class="p-5">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
							<i class="fas fa-memory text-green-600"></i>
						</div>
					</div>
					<div class="ml-5 w-0 flex-1">
						<dl>
							<dt class="text-sm font-medium text-gray-500 truncate">Memory</dt>
							<dd class="text-lg font-medium text-gray-900">{ fmt.Sprintf("%.1f", data.Stats.Memory.UsedPercent) }%</dd>
						</dl>
					</div>
				</div>
				<div class="mt-3">
					<div class="flex items-center text-sm">
						<div class="flex-1 bg-gray-200 rounded-full h-2">
							<div class="bg-green-500 h-2 rounded-full" style={ "width: " + fmt.Sprintf("%.1f", data.Stats.Memory.UsedPercent) + "%" }></div>
						</div>
						<span class="ml-2 text-xs text-gray-500">
							{ utils.FormatBytes(data.Stats.Memory.Used) } / { utils.FormatBytes(data.Stats.Memory.Total) }
						</span>
					</div>
				</div>
			</div>
		</div>

		<!-- Disk Usage -->
		<div class="bg-white overflow-hidden shadow rounded-lg">
			<div class="p-5">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<div class="w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center">
							<i class="fas fa-hdd text-yellow-600"></i>
						</div>
					</div>
					<div class="ml-5 w-0 flex-1">
						<dl>
							<dt class="text-sm font-medium text-gray-500 truncate">Disk Usage</dt>
							<dd class="text-lg font-medium text-gray-900">{ fmt.Sprintf("%.1f", data.Stats.Disk.UsedPercent) }%</dd>
						</dl>
					</div>
				</div>
				<div class="mt-3">
					<div class="flex items-center text-sm">
						<div class="flex-1 bg-gray-200 rounded-full h-2">
							<div class="bg-yellow-500 h-2 rounded-full" style={ "width: " + fmt.Sprintf("%.1f", data.Stats.Disk.UsedPercent) + "%" }></div>
						</div>
						<span class="ml-2 text-xs text-gray-500">
							{ utils.FormatBytes(data.Stats.Disk.Used) } / { utils.FormatBytes(data.Stats.Disk.Total) }
						</span>
					</div>
				</div>
			</div>
		</div>

		<!-- Network -->
		<div class="bg-white overflow-hidden shadow rounded-lg">
			<div class="p-5">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<div class="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center">
							<i class="fas fa-network-wired text-purple-600"></i>
						</div>
					</div>
					<div class="ml-5 w-0 flex-1">
						<dl>
							<dt class="text-sm font-medium text-gray-500 truncate">Network</dt>
							<dd class="text-lg font-medium text-gray-900">Active</dd>
						</dl>
					</div>
				</div>
				<div class="mt-3">
					<div class="text-xs text-gray-500 space-y-1">
						<div>
							<i class="fas fa-arrow-up text-green-500 mr-1"></i>
							{ utils.FormatBytes(data.Stats.Network.BytesSent) }
						</div>
						<div>
							<i class="fas fa-arrow-down text-blue-500 mr-1"></i>
							{ utils.FormatBytes(data.Stats.Network.BytesRecv) }
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- Host Information -->
	<div class="mt-6 bg-gray-50 rounded-lg p-4">
		<h4 class="text-sm font-medium text-gray-700 mb-3">System Information</h4>
		<div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
			<div>
				<span class="font-medium text-gray-600">Hostname:</span>
				<span class="text-gray-900">{ data.Stats.Host.Hostname }</span>
			</div>
			<div>
				<span class="font-medium text-gray-600">OS:</span>
				<span class="text-gray-900">{ data.Stats.Host.OS } { data.Stats.Host.Platform } { data.Stats.Host.PlatformVersion }</span>
			</div>
			<div>
				<span class="font-medium text-gray-600">Kernel:</span>
				<span class="text-gray-900">{ data.Stats.Host.KernelVersion }</span>
			</div>
			<div>
				<span class="font-medium text-gray-600">Uptime:</span>
				<span class="text-gray-900">
					{ utils.FormatUptime(data.Stats.Host.Uptime) }
				</span>
			</div>
			<div>
				<span class="font-medium text-gray-600">CPU Model:</span>
				<span class="text-gray-900">{ data.Stats.CPU.ModelName }</span>
			</div>
		</div>
	</div>
}

templ ProcessListPartial(data ProcessListData) {
	<!-- Process List Table -->
	<div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
		<table class="min-w-full divide-y divide-gray-300">
			<thead class="bg-gray-50">
				<tr>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Process
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						PID
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						CPU %
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Memory
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Status
					</th>
				</tr>
			</thead>
			<tbody class="bg-white divide-y divide-gray-200">
				if len(data.Processes) > 0 {
					for _, process := range data.Processes {
						<tr>
							<td class="px-6 py-4 whitespace-nowrap">
								<div class="flex items-center">
									<div class="flex-shrink-0 h-8 w-8">
										<div class="h-8 w-8 rounded-full bg-gray-100 flex items-center justify-center">
											<i class="fas fa-cog text-gray-600 text-xs"></i>
										</div>
									</div>
									<div class="ml-4">
										<div class="text-sm font-medium text-gray-900">{ process.Name }</div>
									</div>
								</div>
							</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 font-mono">
								{ strconv.FormatInt(int64(process.PID), 10) }
							</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
								{ fmt.Sprintf("%.1f", process.CPUPercent) }%
							</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
								{ utils.FormatBytes(process.Memory) }
							</td>
							<td class="px-6 py-4 whitespace-nowrap">
								<span class={ "inline-flex px-2 py-1 text-xs font-semibold rounded-full " + utils.GetStatusClass(process.Status) }>
									{ process.Status }
								</span>
							</td>
						</tr>
					}
				} else {
					<tr>
						<td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500">
							No processes found
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>

	<div class="mt-4 flex justify-between items-center text-sm text-gray-500">
		<div>
			Showing top { strconv.Itoa(len(data.Processes)) } processes
		</div>
	</div>
}
