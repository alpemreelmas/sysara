// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package templ

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

type BaseData struct {
	Title string
}

func Base(data BaseData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(data.Title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templ/base.templ`, Line: 13, Col: 21}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</title><script src=\"https://cdn.tailwindcss.com\"></script><script src=\"https://unpkg.com/htmx.org@1.9.6\"></script><script src=\"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js\" defer></script><link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\"><link rel=\"stylesheet\" href=\"/static/css/style.css\"><style>\n\t\t\t/* Custom gradient background */\n\t\t\t.bg-gradient-sysara {\n\t\t\t\tbackground: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n\t\t\t}\n\t\t\t.bg-card {\n\t\t\t\tbackground: rgba(255, 255, 255, 0.95);\n\t\t\t\tbackdrop-filter: blur(10px);\n\t\t\t}\n\t\t\t/* Loading animation */\n\t\t\t.htmx-indicator {\n\t\t\t\topacity: 0;\n\t\t\t\ttransition: opacity 0.3s ease-in-out;\n\t\t\t}\n\t\t\t.htmx-request .htmx-indicator {\n\t\t\t\topacity: 1;\n\t\t\t}\n\t\t\t.htmx-request.htmx-indicator {\n\t\t\t\topacity: 1;\n\t\t\t}\n\t\t</style></head><body class=\"bg-gray-50 min-h-screen\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<!-- Loading indicator --><div id=\"loading-indicator\" class=\"htmx-indicator fixed top-4 right-4 bg-blue-500 text-white px-4 py-2 rounded-lg shadow-lg z-50\"><i class=\"fas fa-spinner fa-spin mr-2\"></i> Loading...</div><script>\n\t\t\t// Global HTMX configuration\n\t\t\tdocument.body.addEventListener('htmx:configRequest', function(evt) {\n\t\t\t\tevt.detail.headers['X-Requested-With'] = 'XMLHttpRequest';\n\t\t\t});\n\n\t\t\t// Auto-refresh for monitoring pages\n\t\t\tif (window.location.pathname === '/monitor') {\n\t\t\t\tsetInterval(function() {\n\t\t\t\t\thtmx.trigger('#system-stats', 'refresh');\n\t\t\t\t\thtmx.trigger('#process-list', 'refresh');\n\t\t\t\t}, 5000); // Refresh every 5 seconds\n\t\t\t}\n\n\t\t\t// Notification system\n\t\t\tfunction showNotification(message, type = 'info') {\n\t\t\t\tconst notification = document.createElement('div');\n\t\t\t\tnotification.className = `fixed top-4 left-1/2 transform -translate-x-1/2 px-6 py-3 rounded-lg shadow-lg z-50 ${\n\t\t\t\t\ttype === 'success' ? 'bg-green-500' : \n\t\t\t\t\ttype === 'error' ? 'bg-red-500' : \n\t\t\t\t\ttype === 'warning' ? 'bg-yellow-500' : 'bg-blue-500'\n\t\t\t\t} text-white`;\n\t\t\t\tnotification.textContent = message;\n\t\t\t\tdocument.body.appendChild(notification);\n\t\t\t\t\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tnotification.remove();\n\t\t\t\t}, 3000);\n\t\t\t}\n\n\t\t\t// Format bytes for display\n\t\t\tfunction formatBytes(bytes, decimals = 2) {\n\t\t\t\tif (bytes === 0) return '0 Bytes';\n\t\t\t\tconst k = 1024;\n\t\t\t\tconst dm = decimals < 0 ? 0 : decimals;\n\t\t\t\tconst sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\t\t\t\tconst i = Math.floor(Math.log(bytes) / Math.log(k));\n\t\t\t\treturn parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n\t\t\t}\n\n\t\t\t// Format uptime\n\t\t\tfunction formatUptime(seconds) {\n\t\t\t\tconst days = Math.floor(seconds / 86400);\n\t\t\t\tconst hours = Math.floor((seconds % 86400) / 3600);\n\t\t\t\tconst minutes = Math.floor((seconds % 3600) / 60);\n\t\t\t\treturn `${days}d ${hours}h ${minutes}m`;\n\t\t\t}\n\t\t</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
